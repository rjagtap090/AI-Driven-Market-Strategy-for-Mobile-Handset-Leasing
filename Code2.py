# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tiS6RqHiZ3YAzQizHVLd59f9foFXzkZC
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Load dataset
data = pd.read_excel('BCG_Telco_Data.xlsx')

# Data Cleaning
data.dropna(inplace=True)

# Data Analysis
# Analyzing customer segments
customer_segments = data['CustomerSegment'].value_counts()

# Plotting customer segments
plt.figure(figsize=(10, 6))
sns.barplot(x=customer_segments.index, y=customer_segments.values, palette='viridis')
plt.title('Customer Segments Distribution')
plt.xlabel('Customer Segment')
plt.ylabel('Number of Customers')
plt.show()

# Feature Engineering
# Example: Creating a new feature based on existing data
data['RevenuePerCustomer'] = data['TotalRevenue'] / data['NumberOfCustomers']

# Visualizing Revenue Per Customer
plt.figure(figsize=(10, 6))
sns.histplot(data['RevenuePerCustomer'], bins=30, kde=True, color='purple')
plt.title('Revenue Per Customer Distribution')
plt.xlabel('Revenue Per Customer')
plt.ylabel('Frequency')
plt.show()

# Financial Modeling
# Linear Regression to predict Total Revenue based on Number of Customers and Average Handset Price
X = data[['NumberOfCustomers', 'AverageHandsetPrice']]
y = data['TotalRevenue']

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Creating and training the model
model = LinearRegression()
model.fit(X_train, y_train)

# Making predictions
y_pred = model.predict(X_test)

# Evaluating the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Visualizing the results
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue')
plt.plot(y_test, y_test, color='red', linewidth=2)
plt.title('Actual vs Predicted Total Revenue')
plt.xlabel('Actual Total Revenue')
plt.ylabel('Predicted Total Revenue')
plt.show()

# Excel Integration
# Writing the predictions back to Excel
output = X_test.copy()
output['Actual Total Revenue'] = y_test
output['Predicted Total Revenue'] = y_pred
output.to_excel('Predicted_Revenue_Output.xlsx', index=False)

# Final Recommendations
recommendations = """
1. Target high-value customer segments to maximize revenue.
2. Consider adjusting handset pricing based on customer segment analysis.
3. Use predictive models to forecast revenue and adjust strategies accordingly.
4. Monitor market trends and adapt the business model to stay competitive.
"""

print(recommendations)